{"version":3,"file":"Customers-83ba8a9a.js","sources":["../../../../desk/src/components/desk/global/NewCustomerDialog.vue","../../../../desk/src/pages/desk/customer/CustomerDialog.vue","../../../../desk/src/pages/desk/customer/Customers.vue"],"sourcesContent":["<template>\n  <div>\n    <Dialog\n      v-model=\"model\"\n      :options=\"{ title: 'Add New Customer', size: 'sm' }\"\n    >\n      <template #body-content>\n        <div class=\"space-y-4\">\n          <div class=\"space-y-1\">\n            <Input\n              v-model=\"state.customer\"\n              label=\"Customer Name\"\n              type=\"text\"\n              placeholder=\"Tesla Inc.\"\n            />\n          </div>\n          <div class=\"space-y-1\">\n            <Input\n              v-model=\"state.domain\"\n              label=\"Domain\"\n              type=\"text\"\n              placeholder=\"eg: tesla.com, mycompany.com\"\n            />\n          </div>\n          <div class=\"float-right flex space-x-2\">\n            <Button\n              label=\"Add\"\n              theme=\"gray\"\n              variant=\"solid\"\n              @click.prevent=\"addCustomer\"\n            />\n          </div>\n        </div>\n      </template>\n    </Dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive } from \"vue\";\nimport { Input, Dialog, createResource } from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\n\nconst emit = defineEmits([\"customerCreated\"]);\nconst model = defineModel<boolean>();\n\nconst state = reactive({\n  customer: \"\",\n  domain: \"\",\n});\n\nconst customerResource = createResource({\n  url: \"frappe.client.insert\",\n  method: \"POST\",\n  data: {\n    doc: {\n      doctype: \"HD Customer\",\n      customer_name: state.customer,\n      domain: state.domain,\n    },\n  },\n  onSuccess: () => {\n    state.customer = \"\";\n    state.domain = \"\";\n    createToast({\n      title: \"Customer Created Successfully \",\n      icon: \"check\",\n      iconClasses: \"text-green-600\",\n    });\n    emit(\"customerCreated\");\n  },\n  onError: (err) => {\n    createToast({\n      title: err.messages[0],\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n  },\n});\n\nfunction addCustomer() {\n  if (!state.customer) {\n    createToast({\n      title: \"Customer Name is required\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return;\n  }\n  customerResource.submit({\n    doc: {\n      doctype: \"HD Customer\",\n      customer_name: state.customer,\n      domain: state.domain,\n    },\n  });\n}\n</script>\n","<template>\n  <Dialog :options=\"options\">\n    <template #body-main>\n      <div class=\"flex flex-col items-center gap-4 p-6\">\n        <div class=\"text-xl font-medium text-gray-900\">\n          {{ customer.doc?.name }}\n        </div>\n        <Avatar\n          size=\"lg\"\n          :label=\"customer.doc?.name\"\n          :image=\"customer.doc?.image\"\n          class=\"cursor-pointer hover:opacity-80\"\n        />\n        <div class=\"flex gap-2\">\n          <FileUploader @success=\"(file) => updateImage(file)\">\n            <template #default=\"{ uploading, openFileSelector }\">\n              <Button\n                :label=\"customer.doc?.image ? 'Change photo' : 'Upload photo'\"\n                :loading=\"uploading\"\n                @click=\"openFileSelector\"\n              />\n            </template>\n          </FileUploader>\n          <Button\n            v-if=\"customer.doc?.image\"\n            label=\"Remove photo\"\n            @click=\"updateImage(null)\"\n          />\n        </div>\n        <form class=\"w-full\" @submit.prevent=\"update\">\n          <Input v-model=\"domain\" label=\"Domain\" placeholder=\"example.com\" />\n        </form>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport {\n  createDocumentResource,\n  Avatar,\n  Dialog,\n  FileUploader,\n} from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\nimport { useError } from \"@/composables/error\";\n\nconst props = defineProps({\n  name: {\n    type: String,\n    required: true,\n  },\n});\n\nconst emit = defineEmits([\"customer-updated\"]);\n\nconst domain = computed({\n  get() {\n    return customer.doc?.domain;\n  },\n  set(d: string) {\n    customer.doc.domain = d;\n  },\n});\n\nconst customer = createDocumentResource({\n  doctype: \"HD Customer\",\n  name: props.name,\n  auto: true,\n  setValue: {\n    onSuccess() {\n      createToast({\n        title: \"Customer updated\",\n        icon: \"check\",\n        iconClasses: \"text-green-500\",\n      });\n    },\n    onError: useError({ title: \"Error updating customer\" }),\n  },\n});\n\nconst options = computed(() => ({\n  title: customer.doc?.name,\n  actions: [\n    {\n      label: \"Save\",\n      theme: \"gray\",\n      variant: \"solid\",\n      onClick: () => update(),\n    },\n  ],\n}));\n\nasync function update() {\n  await customer.setValue.submit({\n    domain: domain.value,\n  });\n  emit(\"customer-updated\");\n}\n\nfunction updateImage(file) {\n  customer.setValue.submit({\n    image: file?.file_url || null,\n  });\n  emit(\"customer-updated\");\n}\n</script>\n","<template>\n  <div class=\"flex flex-col\">\n    <LayoutHeader>\n      <template #left-header>\n        <div class=\"text-lg font-medium text-gray-900\">Customers</div>\n      </template>\n      <template #right-header>\n        <Button\n          label=\"New customer\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"isDialogVisible = !isDialogVisible\"\n        >\n          <template #prefix>\n            <LucidePlus class=\"h-4 w-4\" />\n          </template>\n        </Button>\n      </template>\n    </LayoutHeader>\n    <ListViewBuilder\n      ref=\"listViewRef\"\n      :options=\"options\"\n      @row-click=\"openCustomer\"\n      @empty-state-action=\"isDialogVisible = true\"\n    />\n    <NewCustomerDialog\n      v-model=\"isDialogVisible\"\n      @customer-created=\"handleCustomer\"\n    />\n    <span v-if=\"isCustomerDialogVisible\">\n      <CustomerDialog\n        v-model=\"isCustomerDialogVisible\"\n        :name=\"selectedCustomer\"\n        @customer-updated=\"handleCustomer(true)\"\n      />\n    </span>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { ref, computed, h } from \"vue\";\nimport { usePageMeta, Avatar } from \"frappe-ui\";\nimport NewCustomerDialog from \"@/components/desk/global/NewCustomerDialog.vue\";\nimport CustomerDialog from \"./CustomerDialog.vue\";\nimport LayoutHeader from \"@/components/LayoutHeader.vue\";\nimport ListViewBuilder from \"@/components/ListViewBuilder.vue\";\nimport PhoneIcon from \"@/components/icons/PhoneIcon.vue\";\n\nconst isDialogVisible = ref(false);\nconst isCustomerDialogVisible = ref(false);\nconst selectedCustomer = ref(null);\nconst listViewRef = ref(null);\n// const emptyMessage = \"No Customers Found\";\n\nfunction openCustomer(id: string) {\n  selectedCustomer.value = id;\n  isCustomerDialogVisible.value = true;\n}\nfunction handleCustomer(updated = false) {\n  updated\n    ? (isCustomerDialogVisible.value = false)\n    : (isDialogVisible.value = false);\n  listViewRef.value?.reload();\n}\n\nconst options = computed(() => {\n  return {\n    doctype: \"HD Customer\",\n    columnConfig: {\n      name: {\n        prefix: ({ row }) => {\n          return h(Avatar, {\n            shape: \"circle\",\n            image: row.image,\n            label: row.name,\n            size: \"sm\",\n          });\n        },\n      },\n    },\n    emptyState: {\n      title: \"No Customers Found\",\n    },\n  };\n});\n\nusePageMeta(() => {\n  return {\n    title: \"Customers\",\n  };\n});\n</script>\n"],"names":["emit","__emit","model","_useModel","__props","state","reactive","customerResource","createResource","createToast","err","addCustomer","props","domain","computed","_a","customer","d","createDocumentResource","useError","options","update","updateImage","file","isDialogVisible","ref","isCustomerDialogVisible","selectedCustomer","listViewRef","openCustomer","id","handleCustomer","updated","row","h","Avatar","usePageMeta"],"mappings":"ovCA2CA,MAAMA,EAAOC,EACPC,EAAQC,EAAqBC,EAAA,YAAA,EAE7BC,EAAQC,EAAS,CACrB,SAAU,GACV,OAAQ,EAAA,CACT,EAEKC,EAAmBC,EAAe,CACtC,IAAK,uBACL,OAAQ,OACR,KAAM,CACJ,IAAK,CACH,QAAS,cACT,cAAeH,EAAM,SACrB,OAAQA,EAAM,MAChB,CACF,EACA,UAAW,IAAM,CACfA,EAAM,SAAW,GACjBA,EAAM,OAAS,GACHI,EAAA,CACV,MAAO,iCACP,KAAM,QACN,YAAa,gBAAA,CACd,EACDT,EAAK,iBAAiB,CACxB,EACA,QAAUU,GAAQ,CACJD,EAAA,CACV,MAAOC,EAAI,SAAS,CAAC,EACrB,KAAM,IACN,YAAa,cAAA,CACd,CACH,CAAA,CACD,EAED,SAASC,GAAc,CACjB,GAAA,CAACN,EAAM,SAAU,CACPI,EAAA,CACV,MAAO,4BACP,KAAM,IACN,YAAa,cAAA,CACd,EACD,MACF,CACAF,EAAiB,OAAO,CACtB,IAAK,CACH,QAAS,cACT,cAAeF,EAAM,SACrB,OAAQA,EAAM,MAChB,CAAA,CACD,CACH,k6BChDA,MAAMO,EAAQR,EAORJ,EAAOC,EAEPY,EAASC,EAAS,CACtB,KAAM,OACJ,OAAOC,EAAAC,EAAS,MAAT,YAAAD,EAAc,MACvB,EACA,IAAIE,EAAW,CACbD,EAAS,IAAI,OAASC,CACxB,CAAA,CACD,EAEKD,EAAWE,EAAuB,CACtC,QAAS,cACT,KAAMN,EAAM,KACZ,KAAM,GACN,SAAU,CACR,WAAY,CACEH,EAAA,CACV,MAAO,mBACP,KAAM,QACN,YAAa,gBAAA,CACd,CACH,EACA,QAASU,EAAS,CAAE,MAAO,0BAA2B,CACxD,CAAA,CACD,EAEKC,EAAUN,EAAS,IAAO,OAAA,OAC9B,OAAOC,EAAAC,EAAS,MAAT,YAAAD,EAAc,KACrB,QAAS,CACP,CACE,MAAO,OACP,MAAO,OACP,QAAS,QACT,QAAS,IAAMM,EAAO,CACxB,CACF,CACA,EAAA,EAEF,eAAeA,GAAS,CAChB,MAAAL,EAAS,SAAS,OAAO,CAC7B,OAAQH,EAAO,KAAA,CAChB,EACDb,EAAK,kBAAkB,CACzB,CAEA,SAASsB,EAAYC,EAAM,CACzBP,EAAS,SAAS,OAAO,CACvB,OAAOO,GAAA,YAAAA,EAAM,WAAY,IAAA,CAC1B,EACDvB,EAAK,kBAAkB,CACzB,8+BC3DM,MAAAwB,EAAkBC,EAAI,EAAK,EAC3BC,EAA0BD,EAAI,EAAK,EACnCE,EAAmBF,EAAI,IAAI,EAC3BG,EAAcH,EAAI,IAAI,EAG5B,SAASI,EAAaC,EAAY,CAChCH,EAAiB,MAAQG,EACzBJ,EAAwB,MAAQ,EAClC,CACS,SAAAK,EAAeC,EAAU,GAAO,OACvCA,EACKN,EAAwB,MAAQ,GAChCF,EAAgB,MAAQ,IAC7BT,EAAAa,EAAY,QAAZ,MAAAb,EAAmB,QACrB,CAEM,MAAAK,EAAUN,EAAS,KAChB,CACL,QAAS,cACT,aAAc,CACZ,KAAM,CACJ,OAAQ,CAAC,CAAE,IAAAmB,KACFC,EAAEC,EAAQ,CACf,MAAO,SACP,MAAOF,EAAI,MACX,MAAOA,EAAI,KACX,KAAM,IAAA,CACP,CAEL,CACF,EACA,WAAY,CACV,MAAO,oBACT,CAAA,EAEH,EAED,OAAAG,EAAY,KACH,CACL,MAAO,WAAA,EAEV"}