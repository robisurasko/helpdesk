{"version":3,"file":"Contacts-2d916737.js","sources":["../../../../desk/src/components/icons/PhoneIcon.vue","../../../../desk/src/stores/contact.ts","../../../../desk/src/components/desk/global/NewContactDialog.vue","../../../../desk/src/components/MultiSelect.vue","../../../../desk/src/pages/desk/contact/ContactDialog.vue","../../../../desk/src/pages/desk/contact/Contacts.vue"],"sourcesContent":["<template>\n  <svg\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 20 20\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M10.381 15.0091L13.0108 12.8044C13.3009 12.5612 13.7186 12.5445 14.0272 12.7639L16.5838 14.5815C17.0394 14.9054 17.0522 15.5775 16.6093 15.9186L15.6001 16.6955C14.9561 17.1913 14.0933 17.2956 13.3711 16.9225C11.824 16.1231 9.08016 14.5487 7.11025 12.5456C5.21236 10.6158 3.81881 8.0839 3.08578 6.57321C2.70649 5.79154 2.88609 4.87094 3.48778 4.24418L4.42402 3.26893C4.7989 2.87842 5.441 2.94435 5.72871 3.40288L7.34325 5.976C7.55012 6.3057 7.50072 6.73477 7.22432 7.00882L4.62919 9.58191\"\n      stroke=\"currentColor\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n","import { computed, ComputedRef } from \"vue\";\nimport { defineStore } from \"pinia\";\nimport { createListResource } from \"frappe-ui\";\n\ntype Contact = {\n  name: string;\n  first_name: string;\n  last_name: string;\n  full_name: string;\n  email_id: string;\n};\n\nexport const useContactStore = defineStore(\"contact\", () => {\n  const d__ = createListResource({\n    doctype: \"Contact\",\n    fields: [\"*\"],\n    auto: true,\n    pageLength: 99999,\n  });\n\n  const options: ComputedRef<Array<Contact>> = computed(\n    () => d__.list?.data || []\n  );\n\n  return {\n    options,\n  };\n});\n","<template>\n  <div>\n    <Dialog v-model=\"open\" :options=\"{ title: 'Create New Contact' }\">\n      <template #body-content>\n        <div class=\"space-y-4\">\n          <div\n            v-for=\"field in formFields\"\n            :key=\"field.label\"\n            class=\"flex flex-col gap-1\"\n          >\n            <span class=\"mb-2 block text-sm leading-4 text-gray-700\">\n              {{ field.label }}\n            </span>\n            <Input\n              v-if=\"field.type === 'input'\"\n              v-model=\"state[field.value]\"\n              type=\"text\"\n              @blur=\"field.action\"\n            />\n            <Autocomplete\n              v-else\n              v-model=\"state[field.value]\"\n              :options=\"customerResource.data\"\n              :value=\"state[field.value]\"\n              @update:model-value=\"handleCustomerChange\"\n            />\n            <ErrorMessage :message=\"error[field.error]\" />\n          </div>\n          <div class=\"flex justify-end space-x-2\">\n            <Button\n              label=\"Create\"\n              :loading=\"contactResource.loading\"\n              theme=\"gray\"\n              variant=\"solid\"\n              @click=\"createContact()\"\n            />\n          </div>\n        </div>\n      </template>\n    </Dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from \"vue\";\nimport { useContactStore } from \"@/stores/contact\";\n\nimport {\n  Input,\n  Dialog,\n  ErrorMessage,\n  createResource,\n  Autocomplete,\n  createListResource,\n} from \"frappe-ui\";\nimport zod from \"zod\";\n\nimport { createToast } from \"@/utils\";\nimport { AutoCompleteItem } from \"@/types\";\n\ninterface Props {\n  modelValue: boolean;\n}\n\nconst props = defineProps<Props>();\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: boolean): void;\n  (event: \"close\"): void;\n  (event: \"contactCreated\"): void;\n}>();\n\nconst contactStore = useContactStore();\n\nconst state = ref({\n  emailID: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  selectedCustomer: \"\",\n});\n\nconst error = ref({\n  emailValidationError: \"\",\n  firstNameValidationError: \"\",\n  lastNameValidationError: \"\",\n  phoneValidationError: \"\",\n  customerValidationError: \"\",\n});\n\ninterface FormField {\n  label: string;\n  value: string;\n  error: string;\n  type: string;\n  action?: () => void;\n}\n\nconst formFields: FormField[] = [\n  {\n    label: \"Email Id\",\n    value: \"emailID\",\n    error: \"emailValidationError\",\n    type: \"input\",\n    action: () => validateEmailInput(state.value.emailID),\n  },\n  {\n    label: \"First Name\",\n    value: \"firstName\",\n    error: \"firstNameValidationError\",\n    type: \"input\",\n    action: () => validateFirstName(state.value.firstName),\n  },\n  {\n    label: \"Last Name\",\n    value: \"lastName\",\n    error: \"lastNameValidationError\",\n    type: \"input\",\n  },\n  {\n    label: \"Phone\",\n    value: \"phone\",\n    error: \"phoneValidationError\",\n    type: \"input\",\n    action: () => validatePhone(state.value.phone),\n  },\n  {\n    label: \"Customer\",\n    value: \"selectedCustomer\",\n    error: \"customerValidationError\",\n    type: \"autocomplete\",\n    action: () => validateCustomer(state.value.selectedCustomer),\n  },\n];\n\nconst open = computed({\n  get: () => props.modelValue,\n  set: (val) => {\n    emit(\"update:modelValue\", val);\n    if (!val) {\n      emit(\"close\");\n    }\n  },\n});\n\nconst customerResource = createListResource({\n  doctype: \"HD Customer\",\n  fields: [\"name\"],\n  cache: \"customers\",\n  transform: (data) => {\n    return data.map((option) => {\n      return {\n        label: option.name,\n        value: option.name,\n      };\n    });\n  },\n  auto: true,\n});\n\nconst contactResource = createResource({\n  url: \"frappe.client.insert\",\n  onSuccess: () => {\n    state.value = {\n      emailID: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      selectedCustomer: \"\",\n    };\n    createToast({\n      title: \"Contact Created Successfully \",\n      icon: \"check\",\n      iconClasses: \"text-green-600\",\n    });\n    emit(\"contactCreated\");\n  },\n});\n\nfunction createContact() {\n  if (validateInputs()) return;\n\n  let doc = {\n    doctype: \"Contact\",\n    first_name: state.value.firstName,\n    last_name: state.value.lastName,\n    email_ids: [{ email_id: state.value.emailID, is_primary: true }],\n    links: [\n      {\n        link_doctype: \"HD Customer\",\n        link_name: state.value.selectedCustomer,\n      },\n    ],\n    phone_nos: [],\n  };\n  if (state.value.phone) {\n    doc.phone_nos = [{ phone: state.value.phone }];\n  }\n\n  contactResource.submit({ doc });\n}\n\nfunction handleCustomerChange(item: AutoCompleteItem) {\n  if (!item) return;\n  state.value.selectedCustomer = item.value;\n}\n\nfunction validateInputs() {\n  let error = validateEmailInput(state.value.emailID);\n  error += validateFirstName(state.value.firstName);\n  error += validatePhone(state.value.phone);\n  error += validateCustomer(state.value.selectedCustomer);\n  return error;\n}\n\nfunction validateEmailInput(value: string) {\n  error.value.emailValidationError = \"\";\n  const success = zod.string().email().safeParse(value).success;\n\n  if (!value) {\n    error.value.emailValidationError = \"Email should not be empty\";\n  } else if (!success) {\n    error.value.emailValidationError = \"Enter a valid email\";\n  } else if (existingContactEmails(contactStore.options).includes(value)) {\n    error.value.emailValidationError = \"Contact with email already exists\";\n  }\n  return error.value.emailValidationError;\n}\n\nfunction validateFirstName(value: string) {\n  error.value.firstNameValidationError = \"\";\n  if (!value || value.trim() === \"\") {\n    error.value.firstNameValidationError = \"First name should not be empty\";\n  }\n  return error.value.firstNameValidationError;\n}\n\nfunction validatePhone(value: string) {\n  error.value.phoneValidationError = \"\";\n  const reg = /[0-9]+/;\n  if (value && (!reg.test(value) || value.length < 10)) {\n    error.value.phoneValidationError = \"Enter a valid phone number\";\n  }\n  return error.value.phoneValidationError;\n}\n\nfunction validateCustomer(value: string) {\n  error.value.customerValidationError = \"\";\n  if (!value || value.trim() === \"\") {\n    error.value.customerValidationError = \"Customer should not be empty\";\n  }\n  return error.value.customerValidationError;\n}\n\nfunction existingContactEmails(contacts) {\n  return contacts.map((contact) => contact.email_id);\n}\n</script>\n\n<style></style>\n","<template>\n  <div class=\"flex flex-wrap gap-2 rounded-lg bg-gray-100 p-2\">\n    <Pill\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      @click=\"(i) => remove(i)\"\n    />\n\n    <Input\n      v-model=\"input\"\n      class=\"w-full\"\n      :placeholder=\"placeholder\"\n      @keyup.enter=\"add({ label: input, value: input })\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, toRefs } from \"vue\";\nimport { Input } from \"frappe-ui\";\nimport { createToast } from \"@/utils\";\nimport Pill from \"./Pill.vue\";\n\ntype Item = {\n  label: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n};\n\nconst props = defineProps({\n  items: {\n    type: Array<Item>,\n    required: true,\n  },\n  placeholder: {\n    type: String,\n    required: false,\n    default: \"Type...\",\n  },\n  validate: {\n    type: Function,\n    required: false,\n    default: () => false,\n  },\n});\n\nconst emit = defineEmits<{\n  (event: \"update:items\", items: Array<Item>): void;\n}>();\n\nconst { items } = toRefs(props);\nconst input = ref(\"\");\n\nfunction add(item: Item) {\n  const err = props.validate(item);\n\n  if (err) {\n    createToast({\n      title: err,\n      icon: \"x\",\n      iconClasses: \"text-red-500\",\n    });\n\n    return;\n  }\n\n  const res = [...items.value, item];\n  emit(\"update:items\", res);\n  input.value = \"\";\n}\n\nfunction remove(item: Item) {\n  const res = items.value.filter((i) => i.value !== item);\n  emit(\"update:items\", res);\n}\n</script>\n","<template>\n  <Dialog :options=\"options\">\n    <template #body-main>\n      <div class=\"flex flex-col items-center gap-4 p-6\">\n        <div class=\"text-xl font-medium text-gray-900\">\n          {{ contact.doc?.name }}\n        </div>\n        <Avatar\n          size=\"2xl\"\n          :label=\"contact.doc?.name\"\n          :image=\"contact.doc?.image\"\n          class=\"cursor-pointer hover:opacity-80\"\n        />\n        <div class=\"flex gap-2\">\n          <FileUploader\n            :validate-file=\"validateFile\"\n            @success=\"(file:File) => updateImage(file)\"\n          >\n            <template #default=\"{ uploading, openFileSelector }\">\n              <Button\n                :label=\"contact.doc?.image ? 'Change photo' : 'Upload photo'\"\n                :loading=\"uploading\"\n                @click=\"openFileSelector\"\n              />\n            </template>\n          </FileUploader>\n          <Button\n            v-if=\"contact.doc?.image\"\n            label=\"Remove photo\"\n            @click=\"updateImage(null)\"\n          />\n        </div>\n        <div class=\"w-full space-y-2 text-sm text-gray-700\">\n          <div class=\"space-y-1\">\n            <div class=\"text-xs\">Emails</div>\n            <MultiSelect\n              v-model:items=\"emails\"\n              placeholder=\"john.doe@example.com\"\n              :validate=\"validateEmail\"\n            />\n          </div>\n          <div class=\"space-y-1\">\n            <div class=\"text-xs\">Phone Nos</div>\n            <MultiSelect\n              v-model:items=\"phones\"\n              placeholder=\"+91 98765 43210\"\n              :validate=\"validatePhone\"\n            />\n          </div>\n        </div>\n      </div>\n    </template>\n  </Dialog>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref } from \"vue\";\nimport type { Ref } from \"vue\";\nimport {\n  createDocumentResource,\n  Avatar,\n  Dialog,\n  FileUploader,\n} from \"frappe-ui\";\nimport zod from \"zod\";\nimport { createToast } from \"@/utils\";\nimport { useError } from \"@/composables/error\";\nimport MultiSelect from \"@/components/MultiSelect.vue\";\nimport { File, AutoCompleteItem } from \"@/types\";\n\ninterface Props {\n  name: {\n    type: string;\n    required: true;\n  };\n}\n\nconst props = defineProps<Props>();\n\nconst emit = defineEmits<{\n  (event: \"contactUpdated\"): void;\n}>();\n\ninterface Email {\n  email_id: string;\n  is_primary?: boolean;\n}\n\ninterface Phone {\n  phone: string;\n  is_primary_phone?: boolean;\n  is_primary_mobile?: boolean;\n}\n\nconst isDirty: Ref<boolean> = ref(false);\n\nconst emails = computed({\n  get() {\n    const emails = contact.doc?.email_ids || [];\n    return emails.map((e: Email) => ({\n      label: e.email_id,\n      value: e.email_id,\n    }));\n  },\n  set(newVal) {\n    if (newVal.length === 0) {\n      createToast({\n        title: \"At least one email is required\",\n        icon: \"x\",\n        iconClasses: \"text-red-600\",\n      });\n      return;\n    }\n    if (newVal.length !== contact.doc.email_ids.length) {\n      isDirty.value = true;\n    }\n    contact.doc.email_ids = newVal.map((email: AutoCompleteItem) => ({\n      email_id: email.value,\n    }));\n  },\n});\n\nconst phones = computed({\n  get() {\n    const phone_nos = contact.doc?.phone_nos || [];\n    return phone_nos.map((e: Phone) => ({\n      label: e.phone,\n      value: e.phone,\n    }));\n  },\n  set(newVal) {\n    if (newVal.length !== contact.doc.phone_nos.length) {\n      isDirty.value = true;\n    }\n    contact.doc.phone_nos = newVal.map((item: AutoCompleteItem) => ({\n      phone: item.value,\n    }));\n  },\n});\n\nconst contact = createDocumentResource({\n  doctype: \"Contact\",\n  name: props.name,\n  cache: [`contact-${props.name}`, props.name],\n  auto: true,\n  setValue: {\n    onSuccess() {\n      emit(\"contactUpdated\");\n    },\n  },\n});\n\nconst options = computed(() => ({\n  title: contact.doc?.name,\n  actions: [\n    {\n      label: \"Save\",\n      theme: \"gray\",\n      variant: \"solid\",\n      onClick: () => update(),\n    },\n  ],\n}));\n\nfunction update(): void {\n  if (!isDirty.value) {\n    createToast({\n      title: \"No changes to save\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return;\n  }\n  contact.setValue.submit({\n    email_ids: emails.value.map((email: AutoCompleteItem) => ({\n      email_id: email.value,\n      is_primary: email.value === contact.doc.email_id,\n    })),\n    phone_nos: phones.value.map((phoneNum: AutoCompleteItem) => ({\n      phone: phoneNum.value,\n      is_primary_phone: phoneNum.value === contact.doc.phone,\n      is_primary_mobile: phoneNum.value === contact.doc.phone,\n    })),\n  });\n}\n\nfunction updateImage(file: File): void {\n  contact.setValue.submit({\n    image: file?.file_url || null,\n  });\n  isDirty.value = true;\n}\n\nfunction validateEmail(input: AutoCompleteItem): string | void {\n  const success = zod.string().email().safeParse(input.value).success;\n  if (!success) return \"Invalid email\";\n}\n\nfunction validatePhone(input: AutoCompleteItem): string | void {\n  const success = zod\n    .string()\n    .regex(/^\\+[1-9]\\d{1,14}$/)\n    .min(10)\n    .max(15)\n    .safeParse(input.value).success;\n  if (!success) return \"Invalid phone number\";\n}\n\nfunction validateFile(file: File): string | void {\n  let extn = file.name.split(\".\").pop().toLowerCase();\n  if (![\"png\", \"jpg\", \"jpeg\"].includes(extn)) {\n    createToast({\n      title: \"Invalid file type, only PNG and JPG images are allowed\",\n      icon: \"x\",\n      iconClasses: \"text-red-600\",\n    });\n    return \"Invalid file type, only PNG and JPG images are allowed\";\n  }\n}\n</script>\n","<template>\n  <div class=\"flex flex-col\">\n    <LayoutHeader>\n      <template #left-header>\n        <div class=\"text-lg font-medium text-gray-900\">Contacts</div>\n      </template>\n      <template #right-header>\n        <Button\n          label=\"New contact\"\n          theme=\"gray\"\n          variant=\"solid\"\n          @click=\"isDialogVisible = !isDialogVisible\"\n        >\n          <template #prefix>\n            <LucidePlus class=\"h-4 w-4\" />\n          </template>\n        </Button>\n      </template>\n    </LayoutHeader>\n    <ListViewBuilder\n      ref=\"listViewRef\"\n      :options=\"options\"\n      @row-click=\"openContact\"\n      @empty-state-action=\"isDialogVisible = true\"\n    />\n    <NewContactDialog\n      v-model=\"isDialogVisible\"\n      @contact-created=\"handleContactCreated\"\n    />\n    <ContactDialog\n      v-if=\"isContactDialogVisible\"\n      :key=\"selectedContact\"\n      v-model=\"isContactDialogVisible\"\n      :name=\"selectedContact\"\n      @contact-updated=\"handleContactUpdated\"\n    />\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { computed, ref, h } from \"vue\";\nimport { usePageMeta, Avatar } from \"frappe-ui\";\nimport { ListViewBuilder, LayoutHeader } from \"@/components\";\nimport NewContactDialog from \"@/components/desk/global/NewContactDialog.vue\";\nimport ContactDialog from \"./ContactDialog.vue\";\nimport { createToast } from \"@/utils\";\nimport { PhoneIcon } from \"@/components/icons\";\n\nconst isDialogVisible = ref(false);\nconst isContactDialogVisible = ref(false);\nconst selectedContact = ref(null);\n\nconst listViewRef = ref(null);\nconst options = computed(() => {\n  return {\n    doctype: \"Contact\",\n    columnConfig: {\n      full_name: {\n        prefix: ({ row }) => {\n          return h(Avatar, {\n            shape: \"circle\",\n            image: row.image,\n            label: row.name,\n            size: \"sm\",\n          });\n        },\n      },\n      mobile_no: {\n        prefix: PhoneIcon,\n      },\n    },\n    emptyState: {\n      title: \"No Contacts Found\",\n    },\n  };\n});\n\nfunction handleContactCreated(): void {\n  isDialogVisible.value = false;\n  listViewRef.value?.reload();\n}\n\nfunction openContact(id: string): void {\n  selectedContact.value = id;\n  isContactDialogVisible.value = true;\n}\n\nfunction handleContactUpdated(): void {\n  createToast({\n    title: \"Contact updated\",\n    icon: \"check\",\n    iconClasses: \"text-green-500\",\n  });\n  isContactDialogVisible.value = !isContactDialogVisible.value;\n  listViewRef.value?.reload();\n}\nusePageMeta(() => {\n  return {\n    title: \"Contacts\",\n  };\n});\n</script>\n"],"names":["_hoisted_1","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","useContactStore","defineStore","d__","createListResource","computed","_a","props","__props","emit","__emit","contactStore","state","ref","error","formFields","validateEmailInput","validateFirstName","validatePhone","validateCustomer","open","val","customerResource","data","option","contactResource","createResource","createToast","createContact","validateInputs","doc","handleCustomerChange","item","value","success","zod","existingContactEmails","contacts","contact","items","toRefs","input","add","err","res","remove","i","isDirty","emails","e","newVal","email","phones","createDocumentResource","options","update","phoneNum","updateImage","file","validateEmail","validateFile","extn","isDialogVisible","isContactDialogVisible","selectedContact","listViewRef","row","h","Avatar","PhoneIcon","handleContactCreated","openContact","id","handleContactUpdated","usePageMeta"],"mappings":"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"}